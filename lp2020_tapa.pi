%% LPCP Programming Contest 2020, Problem 3, Tapa
%% https://github.com/alviano/lpcp-contest-2020/tree/master/problem-3
%% by Neng-Fa Zhou, 2/2021
%% based on Peter Bernschneider's program at https://github.com/bernschneider/lp-contest
%
%% to use:: picat tapa instance_file

import util, sat.

main =>
    main(["sample.in"]).
    
main([File]) =>
    read_data(File,N,Board,Grid),
    foreach (R in 1..N, C in 1..N, nonvar(Board[R,C]))
        neibs(N,R,C,NeibArr),
        constrain_blocks(Board[R,C],Grid,NeibArr)
    end,
    % 2x2 black areas must be avoided:
    foreach (R in 1..N-1, C in 1..N-1)
        Grid[R,C] + Grid[R,C+1] + Grid[R+1,C] + Grid[R+1,C+1] #< 4
    end,
    % All black cells must be orthogonally connected:
    scc_grid(Grid),    % all 1 cells are connected, a new global constraint in Picat version 3.1
    solve(Grid),
    foreach (R in 1..N)
        foreach (C in 1..N)
            (Grid[R,C] == 1 -> print('*'); print('.'))
        end,
        nl
    end.

read_data(File,N,Board,Grid) =>
    IS = open(File),
    Line1 = read_line(IS),
    [N,NClues] = [to_int(Token) : Token in split(Line1)],
    Board = new_array(N,N),
    Grid = new_array(N,N),
    foreach (_I in 1..NClues)
        Line = read_line(IS),
        [R,C,_|Clues] = [to_int(Token) : Token in split(Line)],
        Board[R,C] = Clues,
        Grid[R,C] = 0
    end,
    Grid :: 0..1,          % the cell (R,C) is blackened iff Grid[R,C] = 1
    close(IS).

neibs(N,R,C,NeibArr) =>
    NeibArr = {(R1,C1) :  (R1,C1) in [(R-1,C-1), (R-1,C), (R-1,C+1), (R,C+1),
                                    (R+1,C+1), (R+1,C), (R+1,C-1), (R,C-1)],
                                     R1 >= 1, R1 =< N,
                                     C1 >= 1, C1 =< N}.

% use NeibArr as a circular array
constrain_blocks(Clues,Grid,NeibArr) =>
    findall_layouts(Clues,NeibArr,Layouts),
    Bs = [],
    foreach (Layout in Layouts)
        B :: 0..1,
        LayoutBs = [cond(Layout[I] == 1, Grid[R,C], #~Grid[R,C]) : I in 1..len(NeibArr), NeibArr[I] = (R,C)],
        B #= min(LayoutBs),
        Bs := [B|Bs]
    end,
    sum(Bs) #>= 1.

findall_layouts(Clues,NeibArr,Layouts) =>
    Size = len(NeibArr),
    Layout = new_array(Size),
    Layouts = findall(Layout, layout(Clues,Size,NeibArr,Layout)).

% nondeterministically returns a layout for a block of Clue number of neighboring cells
layout([Clue|Clues],Size,NeibArr,Layout), Clue >= 1 =>
    between(1,Size,I0),   % the block starts at I0
    prev_index(Size,I0,I1),
    (neib_coords(NeibArr,I0,I1) -> Layout[I1] = 0; true),  % leave a gap
    layout_aux(Clue,Size,NeibArr,I0,Layout),
    layout(Clues,Size,NeibArr,Layout).
layout(_,_Size,_NeibArr,_Layout) => true.

layout_aux(Clue,Size,NeibArr,I,Layout) =>
    var(Layout[I]),
    Layout[I] = 1,
    next_index(Size,I,I1),
    (Clue == 1 ->
        (neib_coords(NeibArr,I,I1) -> Layout[I1] = 0; true)  % leave a gap
    ;
        neib_coords(NeibArr,I,I1),
        layout_aux(Clue-1,Size,NeibArr,I1,Layout)
    ).

next_index(Size,I,I1) =>
    NextI = I+1,
    (NextI > Size -> I1 = 1; I1 = NextI).

prev_index(Size,I,I1) =>
    PrevI = I-1,
    (PrevI == 0 -> I1 = Size; I1 = PrevI).

% (R0,C0) and (R,C) are orthogonal neighbors
neib_coords(NeibArr,I0,I1) =>
    NeibArr[I0] = (R0,C0),
    NeibArr[I1] = (R1,C1),
    (    R0 == R1,
         abs(C0-C1) == 1
     ;
         C0 == C1,
         abs(R0-R1) == 1
    ).

