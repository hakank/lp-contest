% https://github.com/lpcp-contest/lpcp-contest-2019
% roadrunner.pi
import sat.

main =>
    Fs = $[xcoord(1),  xcoord(2),  xcoord(3),
           xcoord(4),  xcoord(5),  xcoord(6),
           xcoord(7),                        
           ycoord(1),  ycoord(2),  ycoord(3),
           ycoord(4),  ycoord(5),  ycoord(6),
           ycoord(7),                        
           hill(4,5),  hill(4,1),  hill(1,3),
           hill(2,5),  hill(7,2),  hill(3,5),
           hill(4,6),  hill(1,4),  hill(6,4),
           hill(2,1),                        
           number(4,6,0),  number(1,4,2),    
           number(6,4,1),  number(2,1,2)],
    roadrunner(Fs).          

main([File]) =>
    Fs = read_file_terms(File),
    roadrunner(Fs).

roadrunner(Fs) =>
    proc_facts(Fs,MaxX,MaxY,Hill),
    Laser = new_array(MaxX,MaxY),
    Laser :: 0..1,
    Road = new_array(MaxX,MaxY),
    Road :: 0..1,
    foreach ($number(X,Y,Num) in Fs)
        sum([Laser[X1,Y1] : (X1,Y1) in [(X-1,Y),(X+1,Y),(X,Y-1),(X,Y+1)],
                            X1 >= 1, X1 =< MaxX,
                            Y1 >= 1, Y1 =< MaxY]) #= Num
    end,                        
    foreach (X in 1..MaxX, Y in 1..MaxY)
        (Hill[X,Y] == 1 ->
            Laser[X,Y] = 0,
            Road[X,Y] = 0
        ; 
            attacked_positions(Hill,X,Y,MaxX,MaxY,Ps),
            foreach ((X1,Y1) in Ps)
                Laser[X,Y] #=> #~Laser[X1,Y1],
                Laser[X,Y] #=> #~Road[X1,Y1]
            end,
            sum([Laser[X1,Y1] : (X1,Y1) in [(X,Y)|Ps]]) #= 0 #=> Road[X,Y]
        )
    end,
    K :: 1..MaxX*MaxY,
    hcp_grid(Road,_Es,K),  % new built-in in Picat version 3.1
    solve([$max(K)],Road),
    printf("safecircuitlen(%d).\n",K).

proc_facts(Fs,MaxX,MaxY,Hill) =>
    MaxY = max([X : $xcoord(X) in Fs]),
    MaxX = max([Y : $xcoord(Y) in Fs]),
    Hill = new_array(MaxX,MaxY),
    foreach ($hill(X,Y) in Fs)
        Hill[X,Y] = 1
    end.
    
attacked_positions(Hill,X,Y,MaxX,MaxY,Ps) =>
    attacked_positions(Hill,X-1,Y,-1,0,MaxX,MaxY,Ps,Ps1),
    attacked_positions(Hill,X+1,Y,1,0,MaxX,MaxY,Ps1,Ps2),
    attacked_positions(Hill,X,Y-1,0,-1,MaxX,MaxY,Ps2,Ps3),
    attacked_positions(Hill,X,Y+1,0,1,MaxX,MaxY,Ps3,[]).

attacked_positions(Hill,X,Y,Dx,Dy,MaxX,MaxY,Ps,PsR),
    X >= 1, X =< MaxX,
    Y >= 1, Y =< MaxY
=>
    (Hill[X,Y] == 1 ->
        Ps = PsR
    ;
        Ps = [(X,Y)|Ps1],
        attacked_positions(Hill,X+Dx,Y+Dy,Dx,Dy,MaxX,MaxY,Ps1,PsR)
    ).
attacked_positions(_Hill,_X,_Y,_Dx,_Dy,_MaxX,_MaxY,Ps,PsR) =>
    Ps = PsR.

